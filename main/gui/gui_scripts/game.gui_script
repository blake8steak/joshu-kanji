local puzzleIndex

local kanjiPuzzleBank = {
	["A"]="Aa@$",
	["B"]="BbyP",
	["C"]="Cc&*",
	["D"]="Dd:|",
	["E"]="Ee3(",
	["F"]="Ff4%"
}
local kanjiPuzzleKeys = {
	"A",
	"B",
	"C",
	"D",
	"E",
	"F"
}
local kanjiPuzzleBankLength = 6

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	math.randomseed(socket.gettime()%10000)
	new_puzzle()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function highlight_box(node, correct)
	-- only called to highlight node1 yellow
	local green = vmath.vector4(0.1, 1, 0.1, 1)
	local red = vmath.vector4(1, 0.1, 0.1, 1)
	local white = vmath.vector4(1, 0.1, 0.1, 1)
	color.w = 0.5
	if correct then
		gui.animate(node, gui.PROP_COLOR, green, gui.EASING_LINEAR, 0.1)
	else
		gui.animate(node, gui.PROP_COLOR, red, gui.EASING_LINEAR, 0.1)
	end
	gui.animate(node, gui.PROP_COLOR, white, gui.EASING_LINEAR, 0.2)
end

function new_puzzle()
	puzzleIndex = math.random(1, kanjiPuzzleBankLength)
	set_new_puzzle_chars() 
end

function set_new_puzzle_chars() 
	local indexArr = shuffle({1,2,3,4})

	print("puzzle index...."..puzzleIndex)
	print("DEBUG...."..kanjiPuzzleBank[kanjiPuzzleKeys[puzzleIndex]])
	gui.set_text(gui.get_node("puzzleKanji1"), string.sub(kanjiPuzzleBank[kanjiPuzzleKeys[puzzleIndex]], indexArr[1], indexArr[1]))
	gui.set_text(gui.get_node("puzzleKanji2"), string.sub(kanjiPuzzleBank[kanjiPuzzleKeys[puzzleIndex]], indexArr[2], indexArr[2]))
	gui.set_text(gui.get_node("puzzleKanji3"), string.sub(kanjiPuzzleBank[kanjiPuzzleKeys[puzzleIndex]], indexArr[3], indexArr[3]))
	gui.set_text(gui.get_node("puzzleKanji4"), string.sub(kanjiPuzzleBank[kanjiPuzzleKeys[puzzleIndex]], indexArr[4], indexArr[4]))

	indexArr = shuffle({1,2,3,4,5,6})
	gui.set_text(gui.get_node("kanji"..indexArr[1]), kanjiPuzzleKeys[puzzleIndex])
	set_random_kanji(gui.get_node("kanji"..indexArr[2]))
	set_random_kanji(gui.get_node("kanji"..indexArr[3]))
	set_random_kanji(gui.get_node("kanji"..indexArr[4]))
	set_random_kanji(gui.get_node("kanji"..indexArr[5]))
	set_random_kanji(gui.get_node("kanji"..indexArr[6]))
end

function set_random_kanji(node)
	local kanji = "一九七二人入八力十下三千上口土夕大女子小山川五天中六円手文日月木水火犬王正出本右四左玉生田白目石立百年休先名字早気竹糸耳虫村男町花見貝赤足車学林空金雨青草音校森刀万丸才工弓内午少元今公分切友太引心戸方止毛父牛半市北古台兄冬外広母用矢交会合同回寺地多光当毎池米羽考肉自色行西来何作体弟図声売形汽社角言谷走近里麦画東京夜直国姉妹岩店明歩知長門昼前南点室後春星海活思科秋茶計風食首夏弱原家帰時紙書記通馬高強教理細組船週野雪魚鳥黄黒場晴答絵買朝道番間雲園数新楽話遠電鳴歌算語読聞線親頭曜顔丁予化区反央平申世由氷主仕他代写号去打皮皿礼両曲向州全次安守式死列羊有血住助医君坂局役投対決究豆身返表事育使命味幸始実定岸所放昔板泳注波油受物具委和者取服苦重乗係品客県屋炭度待急指持拾昭相柱洋畑界発研神秒級美負送追面島勉倍真員宮庫庭旅根酒消流病息荷起速配院悪商動宿帳族深球祭第笛終習転進都部問章寒暑植温湖港湯登短童等筆着期勝葉落軽運遊開階陽集悲飲歯業感想暗漢福詩路農鉄意様緑練銀駅鼻横箱談調橋整薬館題"
	local num = math.random(440)
	local index = 1
	-- jank, but idk how else to get kanji to work properly :P
	for c in kanji:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
		if index == num then
			gui.set_text(node, c)
		end
		index = index + 1
	end
end

function shuffle(t)
	local tbl = {}
	for i = 1, #t do
		tbl[i] = t[i]
	end
	for i = #tbl, 2, -1 do
		local j = math.random(i)
		tbl[i], tbl[j] = tbl[j], tbl[i]
	end
	return tbl
end